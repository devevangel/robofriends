{"version":3,"sources":["serviceWorker.js","components/scroll.jsx","components/card.jsx","components/cardList.jsx","components/searchBox.jsx","components/errorBoundary.jsx","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Scroll","state","console","log","this","props","children","style","overflow","border","height","Component","Card","className","src","id","alt","name","email","CardList","robots","map","robot","key","SearchBox","type","placeholder","onChange","updateList","ErrorBoundary","hasError","error","info","setState","App","robotList","searchfield","handleUpdate","event","target","value","fetch","then","usersData","json","usersList","filteredRobotsList","filter","robotItem","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCESC,G,kNAjBbC,MAAQ,G,uDAGN,OADAC,QAAQC,IAAIC,KAAKC,MAAMC,UAErB,yBACEC,MAAO,CACLC,SAAU,SACVC,OAAQ,kBACRC,OAAQ,UAGTN,KAAKC,MAAMC,c,GAZCK,cCkBNC,E,4MAjBbX,MAAQ,G,uDAEN,OACE,yBAAKY,UAAU,uDACb,yBACEC,IAAG,+BAA0BV,KAAKC,MAAMU,GAArC,iBACHC,IAAI,UAEN,6BACE,4BAAKZ,KAAKC,MAAMY,MAChB,2BAAIb,KAAKC,MAAMa,a,GAXNP,aCsBJQ,E,4MApBblB,MAAQ,G,uDAGN,OACE,6BACGG,KAAKC,MAAMe,OAAOC,KAAI,SAAAC,GACrB,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAMP,GACXA,GAAIO,EAAMP,GACVE,KAAMK,EAAML,KACZC,MAAOI,EAAMJ,gB,GAZJP,aCeRa,E,4MAfbvB,MAAQ,G,uDAEN,OACE,6BACE,2BACEY,UAAU,mCACVY,KAAK,YACLC,YAAY,gBACZC,SAAUvB,KAAKC,MAAMuB,kB,GATPjB,aCiBTkB,E,4MAhBb5B,MAAQ,CACN6B,UAAU,G,gEAGMC,EAAOC,GACvB5B,KAAK6B,SAAS,CAAEH,UAAU,M,+BAI1B,OAAI1B,KAAKH,MAAM6B,SACN,uDAEF1B,KAAKC,MAAMC,a,GAbMK,aC4CbuB,E,4MAtCbjC,MAAQ,CACNkC,UAAW,GACXC,YAAa,I,EASfC,aAAe,SAAAC,GACb,EAAKL,SAAS,CAAEG,YAAaE,EAAMC,OAAOC,S,kEAPvB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAS,OAAIA,EAAUC,UAC5BF,MAAK,SAAAG,GAAS,OAAI,EAAKZ,SAAS,CAAEE,UAAWU,S,+BAOxC,IAAD,OACDC,EAAqB1C,KAAKH,MAAMkC,UAAUY,QAAO,SAAAC,GACrD,OAAOA,EAAU/B,KAAKgC,cAAcC,SAAS,EAAKjD,MAAMmC,gBAG1D,OAAKhC,KAAKH,MAAMkC,UAAUgB,OAItB,yBAAKtC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWe,WAAYxB,KAAKiC,eAC5B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUjB,OAAQ0B,OARnB,wBAAIjC,UAAU,MAAd,e,GAtBKF,a,MCAlByC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,6BACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SPsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACL7B,QAAQ6B,MAAMA,EAAMgC,a","file":"static/js/main.43f0f101.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\n\r\nclass Scroll extends Component {\r\n  state = {};\r\n  render() {\r\n    console.log(this.props.children);\r\n    return (\r\n      <div\r\n        style={{\r\n          overflow: \"scroll\",\r\n          border: \"5px solid black\",\r\n          height: \"800px\"\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Card extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"bg-light-green dib ma2 pa3 br3 grow bw2 shadow-5 tc\">\r\n        <img\r\n          src={`https://robohash.org/${this.props.id}?size=200x200`}\r\n          alt=\"robot\"\r\n        />\r\n        <div>\r\n          <h2>{this.props.name}</h2>\r\n          <p>{this.props.email}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./card\";\r\n\r\nclass CardList extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.robots.map(robot => {\r\n          return (\r\n            <Card\r\n              key={robot.id}\r\n              id={robot.id}\r\n              name={robot.name}\r\n              email={robot.email}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardList;\r\n","import React, { Component } from \"react\";\r\n\r\nclass SearchBox extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          className=\"pa3 ba b--green bg-lightest-blue\"\r\n          type=\"searchbox\"\r\n          placeholder=\"search robots\"\r\n          onChange={this.props.updateList}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    hasError: false\r\n  };\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Ooops! That is not good</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from \"react\";\nimport './App.css'\nimport Scroll from \"../components/scroll\";\nimport CardList from \"../components/cardList\";\nimport SearchBox from \"../components/searchBox\";\nimport ErrorBoundary from '../components/errorBoundary';\n\nclass App extends Component {\n  state = {\n    robotList: [],\n    searchfield: \"\"\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(usersData => usersData.json())\n      .then(usersList => this.setState({ robotList: usersList }));\n  }\n\n  handleUpdate = event => {\n    this.setState({ searchfield: event.target.value });\n  };\n\n  render() {\n    const filteredRobotsList = this.state.robotList.filter(robotItem => {\n      return robotItem.name.toLowerCase().includes(this.state.searchfield);\n    });\n\n    if (!this.state.robotList.length) {\n      return <h1 className=\"tc\">Loading</h1>;\n    } else {\n      return (\n        <div className=\"tc\">\n          <h1 className=\"f1\">RoboFreinds</h1>\n          <SearchBox updateList={this.handleUpdate} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobotsList} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from './containers/App';\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}